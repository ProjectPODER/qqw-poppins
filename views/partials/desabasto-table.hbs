<section class="profile" id="desabasto-reportado">
  <div class="profile-content">
    <div class="row">
      <div class="box-title-section">
        <div class="box-title-icon">
          <i class="fas fa-times"></i>
        </div>
        <h4 class="description-data-subtitle">{{{_ "DESABASTO REPORTADO"}}}</h4>
      </div>
      <div class="col-12 col-md-12">
        <p>{{{_ "Con datos de Cero Desabasto, que es un colectivo impulsado por Nosotrxs que reúne a pacientes,
          familiares de pacientes, médicos, organizaciones, académicos y autoridades para lograr el acceso efectivo a
          medicamentos e insumos médicos con el fin de garantizar el derecho a la salud."}}}</p>
        <div class="table-responsive">
          <table width="100%" id="desabasto-table" class="table row-border" style="display: none;">
            <thead>
              <tr>
                <th>{{{_ "FECHA"}}}</th>
                <th>{{{_ "ESTADO"}}}</th>
                <th>{{{_ "INSTITUCIÓN"}}}</th>
                <th>{{{_ "NOMBRE DEL HOSPITAL"}}}</th>
              </tr>
            </thead>
          </table>
        </div>
        <div id="desabasto-loading">
          <h4 class="text-darkblue text-center"><b>Cargando....</b></h4>
        </div>
        <div id="desabasto-empty" style="display: none;">
          <h4 class="text-darkblue text-center"><b>No existen reportes de desabasto</b></h4>
        </div>
        <div id="desabasto-show" style="display: none;">
          <h5 class="description-data-subname">Casos de desabasto</h5>
          {{!-- <fieldset>
            <input type="radio" id="desabasto-acumulado" name="desabasto" checked=checked>
            <label for="desabasto-acumulado">Acumulado</label>
            <input type="radio" id="desabasto-individual" name="desabasto">
            <label for="desabasto-individual">Individual</label>
          </fieldset>
          <fieldset>
            <input type="radio" id="institucion-imss" name="institucion" checked=checked>
            <label for="institucion-imss">IMSS</label>
            <input type="radio" id="institucion-todas" name="institucion">
            <label for="institucion-todas">Todas</label>
          </fieldset> --}}
          <div class="form-check-inline">
            <label class="form-check-label" for="desabasto-acumulado">
              <input type="radio" id="desabasto-acumulado" name="desabasto" checked=checked>Acumulado
            </label>
          </div>
          <div class="form-check-inline">
            <label class="form-check-label" for="desabasto-individual">
              <input type="radio" id="desabasto-individual" name="desabasto">Individual
            </label>
          </div>
          <div class="form-check-inline">
            <label class="form-check-label" for="institucion-imss">
              <input type="radio" id="institucion-imss" name="institucion" checked=checked>IMSS
            </label>
          </div>
          <div class="form-check-inline">
            <label class="form-check-label" for="institucion-todas">
              <input type="radio" id="institucion-todas" name="institucion">Todas
            </label>
          </div>

          <svg id="grafica-desabasto"></svg>

        </div>
      </div>
    </div>
  </div>
</section>

<script type="text/javascript">

  //Events

  let only_imss = true
  let show_cummul = true
  let data_desabasto = undefined

  window.addEventListener('load', function () {
    if ("{{result.classification}}" == "institution") {
      campo = "validados=all&institucion=IMSS&estado_nombre="
      valor = "{{result.area.[0].name}}"
    }
    else {
      campo = "validados=all&clave";
      valor = "{{result.id}}";
      //valor = "key";
    }
    getDesabasto(campo,valor)


    $("#desabasto-acumulado").click(function(){
      show_cummul = true
      initDesabasto(false, true);
    })
    $("#desabasto-individual").click(function () {
      show_cummul = false
      initDesabasto(false, true);
    })
    $("#institucion-imss").click(function () {
      only_imss = true
      initDesabasto(false);
    })
    $("#institucion-todas").click(function () {
      only_imss = false
      initDesabasto(false);
    })
  })

  function getDesabasto(campo, valor) {

    console.log("Consultando reportes de desabasto", valor, campo)
    const base_api = 'https://api.yeeko.org/api-rest/desabasto'
    const commons = '&supplies=false&format=json'
    let reports_url = `${base_api}/reports/?${campo}=${valor}${commons}`;
    $.get(reports_url, function (data) {
      console.log("Respuesta reportes de desabasto", data);
      if (data.count == 0) {
        $("#desabasto-loading").hide();
        $("#desabasto-empty").show();
        $("#desabasto-table").hide();
      }
      else {
        $("#desabasto-loading").hide();
        $("#desabasto-show").show();
        $("#desabasto-table").show();
        data_desabasto = data.data
        initDesabasto();

      }
    })
  }
  function changeAxisY(only_imss=true, is_init=true) {

  }
  function initDesabasto(is_init=true, change_axis=false) {

    let width = 599;
    let height = 300;

    let svg = d4.select("#grafica-desabasto")

    let color = d4.interpolateHsl(
        d4.rgb('#607D8B').brighter(1.2), d4.rgb('#607D8B').darker(1) )

    var margin = {top: 10, right: 10, bottom: 30, left: 25},
      width2 = 600 ,
      height2 = 220 ;

    //let range_x = d4.extent(data, d=> d.created)

    //data = data.sort((a, b)=> a.id - b.id);

    let accumulator = 0;

    let data_filtered = data_desabasto.filter(item=>
      only_imss ? (item.institution && item.institution.code) == 'IMSS' : true )
  
    const transition1 = svg.transition()
      .duration(1500);

    let data_chart = data_filtered.map(item=>{
      let date = new Date(item.created)
      let month = date.getMonth() + (date.getYear() * 12)
      let exact = date.getMonth() + (date.getYear() * 12) + ( date.getDate() / 31)
      accumulator++
      return { ...item,
        ...{ month: month, month_exact: exact, y_cumulative: accumulator } }
    })
    //let range_x = d4.extent(data_chart, d=> d.month)
    //let max_x = d4.max(data_chart, d=> d.month) + 1
    let now = new Date()
    let max_x = (now.getYear() * 12 + now.getMonth() )
    let range_x = [1430, max_x]
    let ticks_x = max_x - 1430

    var x = d4.scaleLinear()
      .domain(range_x)
      .range([margin.left, width2 - margin.right]);

    var histogram = d4.histogram()
      .value(d => d.month )
      //.value(d => d.created )
      .domain(x.domain())
      .thresholds(x.ticks(ticks_x));

    svg
      .attr("viewBox", [-20, 5,
          width2 + 0 + margin.right + margin.left,
          height2 + 10 + margin.bottom+margin.top])

    let formatX = (e) => {
      return e%3 
        ? ''
        : `${(e%12)+1}/${Math.floor(e/12)-100}`
    }

    var bins = histogram(data_chart);

    var max_y = d4.max(bins, d => d.length + 2)

    var y = d4.scaleLinear()
      .domain([0, (show_cummul ? data_chart.length : max_y) + 2])
      .range([height2, margin.bottom])


    //let ticks_y = d4.max(bins, d=> d.length)
    let yAxis = (g) =>{
      g
        .attr("class", "y-axis")
        .call(d4.axisLeft(y).ticks(10))
    } 

    var rects = svg
      .selectAll("rect")
      .data(bins)
    
    var legends = svg
      .selectAll(".legend")
      .data(bins)


    let data_cumul = [
      { month_exact: 1430, y_cumulative: 0 }, 
      ...data_chart, 
      { month_exact: max_x, y_cumulative: data_chart.length }, 
    ]


    let curve = d4.curveLinear;

    let area = d4.area()
      .curve(curve)
      .x(d => x(d.month_exact))
      .y0(y(0))
      .y1(d => y(d.y_cumulative));

    
    //if (!change_axis){
      svg.selectAll("#area_chart").remove()
      const path = svg.append("path")
        .datum(data_cumul)
        .attr("display", show_cummul ? "default" : "none")
    //}
  

    if (is_init){
      svg.append("g")
        .attr("transform", `translate(0,${height2})`)
        .call(d4.axisBottom(x).tickFormat(formatX).ticks(ticks_x))
          .selectAll("text")

      svg.append("g")
        .attr("transform", d => `translate(${margin.left}, 0)`)
        .call(yAxis)

      rects
        .enter()
        //.filter(d=> d.length)
          .append('rect')
          .attr('class', 'bins_chart')
          .attr("width", d => x(d.x1) - x(d.x0))
          .attr("x", 1)
          .style("fill", "#00b0ff")
          .attr("display", show_cummul ? "none" : "default")
          .attr("transform", d => `translate(${x(d.x0-0.5)}, ${y(d.length)})`)
          .attr("height", d=> height2 - y(d.length));

      legends
        .enter()
          .append('text')
          .attr("class", "legend bins_chart")
          .text(d=> d.length)
          .style("text-anchor", "middle")
          .style("fill", "grey")
          .attr("opacity", d=> d.length ? 1 : 0)
          .attr("display", show_cummul ? "none" : "default")
          //.attr("transform", d => `translate(${x(d.x0+.25)}, ${y(0)})`)
          .attr("transform", d => `translate(${x(d.x0)}, ${y(d.length+.2)})`)
      
      path
        .attr('class', 'cumulative_chart')
        .attr('id', 'area_chart')
        .attr("fill", "#8242a8")
        .attr("opacity", "0.4")
        .attr("d", area);

    }
    else{
      //rects.exit().remove()//
      //rects.enter().append("rect")
          //.attr("height", 0);
      svg.selectAll(".y-axis").transition()
        .duration(500)
        .call(d4.axisLeft(y).ticks(10))

      path.transition()
        .duration(500)
        .attr('id', 'area_chart')
        .attr('class', 'cumulative_chart')
        .attr("fill", "#8242a8")
        .attr("opacity", "0.4")
        .attr("d", area);

      rects.transition()
        .duration(500)
        .attr("display", show_cummul ? "none" : "default")
        .attr("transform", d => 
          `translate(${x(d.x0-0.5)}, ${y(d.length)})`
        )
        .attr("height", d=> height2 - y(d.length))

      legends.transition()
        .duration(500)
        .text(d=> d.length)       
        .attr("display", show_cummul ? "none" : "default")
        .attr("opacity", d=> d.length ? 1 : 0)
        //.attr("transform", d => `translate(${x(d.x0+.25)}, ${y(0)})`)
        .attr("transform", d => `translate(${x(d.x0)}, ${y(d.length+.2)})`)

      
    }

    if (is_init){
      svg.append("text")
        .attr("class", "x label")
        .attr("text-anchor", "end")
        .attr("x", width2)
        .attr("font-size", "11px")
        .attr("y", height2 + margin.bottom)
        .text("Mes del reporte");

      svg.append("text")
        .attr("class", "y label")
        .attr("text-anchor", "end")
        .attr("x", -25)
        .attr("y", -20)
        .attr("dy", "1em")
        .attr("font-size", "11px")
        .attr("transform", "rotate(-90)")
        .text("Número de reportes");
    }
    else
      return

    $('#desabasto-table').DataTable({
      data: data_desabasto,
      responsive: true,
      columns: [
        { "data": {
          _: function (data) {
            let date = new Date(data.created)
            return date.getDate() + "/" + (date.getMonth()+1) + "/" + date.getFullYear()
          },
          sort: "created",
          render: function (data) {
            let date = new Date(data)
            return date.getDate() + "/" + (date.getMonth()+1) + "/" + date.getFullYear()
          }
        } 
        
        },
        { "data": "state.short_name" },
        { "data": "institution.name" },
        
        { "data": "hospital_name_raw", render: function (data, type, row) {
          if (!data) {
            if (row.clues && row.clues.name) {
              {{!-- console.log("clues") --}}
              return row.clues.name
            } else {
              {{!-- console.log("no") --}}
              return "(no reportado)"
            }
          } else {
              {{!-- console.log("original") --}}

            return data
          }
        }
        }
      ],
      language: datatablesLang,
      "order": [[0, 'desc']]
    });
  }
</script>