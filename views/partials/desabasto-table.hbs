<section class="profile" id="desabasto-reportado">
  <div class="profile-content">
    <div class="row">
      <div class="box-title-section">
        <div class="box-title-icon">
          <i class="fas fa-times"></i>
        </div>
        <h4 class="description-data-subtitle">{{{_ "DESABASTO REPORTADO"}}}</h4>
      </div>
      <div class="col-12 col-md-12">
        <p>{{{_ "Con datos de Cero Desabasto, que es un colectivo impulsado por Nosotrxs que reúne a pacientes,
          familiares de pacientes, médicos, organizaciones, académicos y autoridades para lograr el acceso efectivo a
          medicamentos e insumos médicos con el fin de garantizar el derecho a la salud."}}}</p>
        <div class="table-responsive">
          <table width="100%" id="desabasto-table" class="row-border dt-responsive" style="display: none;">
            <thead>
              <tr>
                <th>{{{_ "FECHA"}}}</th>
                <th>{{{_ "ENTIDAD"}}}</th>
                <th>{{{_ "CLAVE"}}}</th>
                <th>{{{_ "INSTITUCIÓN"}}}</th>
                <th>{{{_ "NOMBRE DEL HOSPITAL"}}}</th>
                {{!-- <th>{{{_ "DIRECCIÓN"}}}</th>
                <th>{{{_ "RELATO DE CORRUPCIÓN"}}}</th> --}}
              </tr>
            </thead>
          </table>
        </div>
        <div id="desabasto-loading">
          Cargando....
        </div>
        <div id="desabasto-empty" style="display: none;">
          No existen reportes de desabasto...
        </div>
        <div id="desabasto-show" style="display: none;">
          <svg id="grafica-desabasto"></svg>

        </div>
      </div>
    </div>
  </div>
</section>

<script type="text/javascript">

  //DATA
  const product_contracts_data = {{{ j result.contracts }}};
  //Events
  window.onload = function () {
    getDesabasto("{{result.id}}")
    initSobrecosto();
  }

  function initSobrecosto() {
    let width = 800;
    let height = 350;
    const margin = ({ top: 40, right: 20, bottom: 20, left: 60 })

    let svg = d4.select("#grafica-sobrecosto")

    svg.attr("viewBox", [0, 0, width, height]);

    let cleanJSON = (json) => {
      return json.map(hit => {
        return {
          fecha_inicio: hit.contracts.period.startDate.substr(0, 10),
          precio_unitario: hit.contracts.items.unit.value.amount,
          precio_ponderado: hit.contracts.items.unit.value.valueAverageMxIMSS,
          cantidad_consolidada: hit.contracts.items.quantity
        }
      })
    }

    let timeParse = d4.timeParse("%Y-%m-%d")
    console.log(d4)
    //console.log(d4Array)
    let calc_data = () => {
      let droug = {}
      let hits = cleanJSON(product_contracts_data)
      console.log("newHits", hits)
      droug.hits = hits.map(hit =>
      ({
        ...hit,
        ...{
          date: timeParse(hit.fecha_inicio),
          overprice: hit.precio_unitario / hit.precio_ponderado
        }
      }))
      let years_prices = droug.hits.reduce((arr, x) => {
        let year = x.date.getFullYear()
        if (!arr.some(y => y.year == year))
          arr.push({ year: year, ponderado: x.precio_ponderado })
        return arr
      }, [])
      //droug.years_prices = d4.sort(years_prices, d=>d.year)
      droug.years_prices = years_prices.sort((a, b) => a.year - b.year);
      //droug.years_prices = years_prices

      droug.years_prices2 = droug.years_prices.reduce((arr, x) => {
        let curr_range = ["01-01", "12-31"].map(y => (
          { date: timeParse(`${x.year}-${y}`), value: x.ponderado }))
        return [...arr, ...curr_range]
      }, [])

      return droug
    }
    let data = calc_data()
    console.log(data)
    let data_diam = Object.assign(data.hits, { x: "Fecha", y: "Precio unitario" })
    let domain_hits = d4.extent(data_diam, d => d.date)
    let extent_years = domain_hits.map(d => d.getFullYear())
    let x_ticks = extent_years[1] - extent_years[0] + 1
    let sorted_price = data_diam.map(x => x.precio_unitario).sort(d4.ascending)
    let sorted_overprice = data_diam.map(x => x.overprice).sort(d4.ascending)

    let domain_x = d4.extent(data_diam, d => d.date)
    let x = d4.scaleTime()
      .domain(domain_x)
      .range([margin.left, width - margin.right])
    let formatX = d4.timeFormat("%b-%y")

    let y = d4.scalePow().exponent(1 / 8)
      .domain([d4.min(data_diam, d => d.precio_unitario), d4.quantile(sorted_price, 0.99)])
      .rangeRound([height - margin.bottom, margin.top])
    let formatY = d4.format(".0s")
    let formatLegend = d4.format(",.0f")
    let y_overprice = d4.scaleSqrt()
      .domain([0, 0.9, 1.1, d4.quantile(sorted_overprice, 0.99)])
      .range([1, .6, .4, 0])

    let min_radius = 12
    let max_radius = 100
    let range_r = [4 / (20 - min_radius), 4 * max_radius / 26]
    let real_max_r = d4.max(data.hits, d => d.cantidad_consolidada)
    let r_bubble = d4.scaleSqrt()
      .domain([0, real_max_r])
      .range(range_r)
    let r_bubble_stroke = d4.scaleSqrt()
      .domain([0, d4.max(data.hits, d => d.cantidad_consolidada)])
      .range([1 / 8, 1])

    let interpolateTurbo = (t) => {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
        + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
        + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
        + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
        + ")";
    }

    let colorCircles = d4.scaleSequential(interpolateTurbo)
      //let colorCircles = d4.scaleSequential(d4.interpolateCool)
      .domain([1, 0])

    let yAxis = g => g
      .attr("transform", `translate(${margin.left / 2},0)`)
      .call(d4.axisLeft(y).ticks(x_ticks, formatY))
      .call(g => g.select(".domain").remove())
      .call(g => g.append("text")
        .attr("x", 0)
        .attr("y", margin.top)
        .attr("dy", "-.71em")
        .attr("fill", "currentColor")
        .attr("font-weight", "bold")
        .attr("text-anchor", "start")
        .text(data_diam.y))

    let xAxis = g => g
      .attr("transform", `translate(0,${height - margin.bottom})`)
      .call(d4.axisBottom(x).ticks(width / 80, formatX))
      .call(g => g.select(".domain").remove())
      .call(g => g.append("text")
        .attr("x", width - margin.right)
        .attr("y", -6)
        .attr("fill", "currentColor")
        .attr("font-weight", "bold")
        .attr("text-anchor", "end")
        .text(data_diam.x))

    svg.append("g")
      .call(xAxis);
    svg.append("g")
      .call(yAxis);

    svg.append("g")
      .attr("fill-opacity", 0.3)
      .selectAll("circle")
      .data(data.hits)
      .enter().append("circle")
      .attr("id", "circle")
      .attr("cx", d => x(d.date))
      .attr("cy", d => y(d.precio_unitario))
      .attr("r", d => r_bubble(d.cantidad_consolidada) * 2)
      .attr("stroke-width", d => r_bubble_stroke(d.cantidad_consolidada))
      .each(function (p) {
        const current_color = colorCircles(y_overprice(p.overprice))
        d4.select(this)
          .attr("stroke", d => current_color)
          .style("fill", d => current_color)
      })


    line = d4.line()
      .curve(d4.curveStep)
      .x(d => x(d.date))
      .y(d => y(d.value))

    svg.append("g")
      //.selectAll("line")
      .style("fill", "transparent")
      //.data(data.years_prices2)
      //.enter()
      .append("path")
      //.style("stroke", "#00bcd4")
      .attr("d", line(data.years_prices2))
      .style("stroke", colorCircles(y_overprice(1)))
      .style("stroke-width", 2)
    //.attr("x1", d => x(timeParse(`${d.year}-01-01`)) )
    //.attr("y1", d => y(d.ponderado) )
    //.attr("x2", d => x(timeParse(`${d.year}-12-31`)) )
    //.attr("y2", d => y(d.ponderado));

    const valuesToShow = [real_max_r / 100, real_max_r / 4, real_max_r]
    const xCircle = 320
    const xLabel = xCircle - 60
    const yCircle = 70

    svg
      .append('rect')
      .attr("width", "180")
      .attr("height", 78)
      .attr("transform", "translate(185, 0)")
      .style("fill", "#ffffff")
      .style("stroke-width", 1)
      .style("stroke", "#bfbfbf");

    var legends = svg.selectAll("legend")
      .data(valuesToShow)
      .enter()
      .append("g")

    legends
      .append("circle")
      .attr("cx", xCircle)
      .attr("cy", d => yCircle - r_bubble(d))
      .attr("r", d => r_bubble(d))
      .style("fill", "none")
      .attr("stroke", "#4E4E4E")

    legends
      .append("line")
      .attr('x1', function (d) { return xCircle - r_bubble(d) })
      .attr('x2', xLabel)
      .attr('y1', function (d) { return yCircle - r_bubble(d) })
      .attr('y2', function (d) { return yCircle - r_bubble(d) })
      .attr('stroke', '#4E4E4E')
      .style('stroke-dasharray', ('2,2'))

    legends
      .append("text")
      .attr('x', xLabel - 5)
      .attr('y', function (d) { return yCircle - (r_bubble(d)) })
      .text(d => formatLegend(d / 1000))
      .style("font-size", 7)
      .attr('alignment-baseline', 'middle')
      .attr('text-anchor', 'end')
      .style("fill", "#4E4E4E");

    svg
      .append("text")
      .attr('x', 190)
      .attr("y", 10)
      .text("Unidades compradas")
      .attr("text-anchor", "left")
      .style("alignment-baseline", "middle")
      .style("font-family", "sans-serif")
      .style("font-size", 10)
      .style("fill", "#4E4E4E");

    const right_legend_line = 400

    svg
      .append('rect')
      .attr("width", 180)
      .attr("height", 78)
      .attr("transform", `translate(${right_legend_line}, 0)`)
      .style("fill", "#ffffff")
      .style("stroke-width", 1)
      .style("stroke", "#bfbfbf");

    const legend_line = svg.append("g")
      .attr("transform", `translate(${right_legend_line}, 0)`)

    const border_padding = 5;
    const item_padding = 16;
    const text_offset = 0;
    const width_line = 100;
    const height_line = 4;

    // Line
    legend_line
      .append("rect")
      .attr("x", border_padding + 35)
      .attr("y", border_padding - (height_line / 2) + 37)
      .attr("width", width_line)
      .attr("height", height_line)
      .style("fill", (d) => colorCircles(y_overprice(1)));

    // Labels
    legend_line
      .append("text")
      .attr("x", border_padding)
      .attr("y", border_padding + text_offset + (height_line / 2) + 3)
      .text("Precio promedio ponderado")
      .attr("text-anchor", "left")
      .style("alignment-baseline", "middle")
      .style("font-family", "sans-serif")
      .style("font-size", 10)
      .style("fill", "#4E4E4E");


  }

  function getDesabasto(clave) {

    console.log("Consultando reportes de desabasto", clave)

    let reports_url = "https://api.yeeko.org/api-rest/desabasto/reports/?clave=" + clave + "&format=json";
    $.get(reports_url, function (data) {
      console.log("Respuesta reportes de desabasto", data);
      if (data.count == 0) {
        $("#desabasto-loading").hide();
        $("#desabasto-empty").show();
        $("#desabasto-table").hide();
      }

      else {
        $("#desabasto-loading").hide();
        $("#desabasto-show").show();
        $("#desabasto-table").show();
        initDesabasto(data.data);

      }
    })
  }
  function initDesabasto(data) {

    let width = 599;
    let height = 300;

    let svg = d4.select("#grafica-desabasto")

    svg.attr("viewBox", [0, 0, width, height]);

    svg.append("circle")
      .attr("id", "circle2")
      .attr("cx", width / 2)
      .attr("cy", height / 2)
      .attr("r", 40)
      .attr("fill", "#ffb3a2")


    // Desabasto table
    $('#desabasto-table').DataTable({
      data: data,
      responsive: true,
      columns: [
        { "data": "created", render: function (data) {
            return moment(data).format('DD/MM/YYYY HH:mm');
          }
        },
        { "data": "state.name" },
        { "data": "institution.id" },
        { "data": "institution.name" },
        { "data": "hospital_name_raw" }
      ],
      language: datatablesLang,
      "order": [[0, 'desc']]
    });
  }
</script>